package specs;

import pdu.*;

public abstract class DFASpec {

	// common server and client fields
	
		/**
		 * The state of the protocol
		 */
		protected DFAState state = DFAState.CLOSED;
	

		/**
		 * Initializes the DFA with the given house.
		 */
		public DFASpec() {
		
		}
		
		// common procedures
		
		/**
		 * Main DFA message processing procedure. Processes the given message with
		 * respect to the current state of the DFA, changes the state of the DFA
		 * accordingly and returns the message to be sent to the other side.
		 * @param m incoming message to process at the current state.
		 * @return the response message after the DFA state is changed, corresponding
		 * to the input message.
		 */
		public Message process(Message m) {
			// if the incoming message is a shutdown request, return immediately
			if (m == Message.SHUTDOWN) return m;
			// otherwise, process the message in the respective state of the protocol
			switch (state) {
			case IDLE:					return processIdle(m);
			case C_AWAITS_VERSION:		return processClientAwaitsVersion(m);
			case S_AWAITS_VERSION:		return processServerAwaitsVersion(m);
			case C_AWAITS_CHALLENGE:	return processClientAwaitsChallenge(m);
			case S_AWAITS_RESPONSE:		return processServerAwaitsResponse(m);
			case C_AWAITS_INIT:			return processClientAwaitsInit(m);
			case S_AWAITS_ACTION:		return processServerAwaitsAction(m);
			case C_AWAITS_CONFIRM:		return processClientAwaitsConfirm(m);
			default:					return Message.ERROR_GENERAL; // should not get here
			}
		}
		
		
}
